
Lab_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000853  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b0  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000120e5  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000138d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000050e  00000000  00000000  000138e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	3a c0       	rjmp	.+116    	; 0x13a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "../header/io.h"

int main (void)
{

	printf("Hello World\n");
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	06 d0       	rcall	.+12     	; 0xda <puts>
	DDRB = 0xFF; // Configure port B's 8 pins as outputs
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; // Initialize PORTB output to 0¡¯s
  d2:	15 b8       	out	0x05, r1	; 5
	while(1){
		PORTB = 0x0F; // Writes port B's 8 pins with 00001111
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0xe>

000000da <puts>:
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end+0x2>
  e6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x3>
  ea:	23 81       	ldd	r18, Z+3	; 0x03
  ec:	21 ff       	sbrs	r18, 1
  ee:	1b c0       	rjmp	.+54     	; 0x126 <puts+0x4c>
  f0:	8c 01       	movw	r16, r24
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	f8 01       	movw	r30, r16
  f8:	81 91       	ld	r24, Z+
  fa:	8f 01       	movw	r16, r30
  fc:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end+0x2>
 100:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x3>
 104:	db 01       	movw	r26, r22
 106:	18 96       	adiw	r26, 0x08	; 8
 108:	ed 91       	ld	r30, X+
 10a:	fc 91       	ld	r31, X
 10c:	19 97       	sbiw	r26, 0x09	; 9
 10e:	88 23       	and	r24, r24
 110:	31 f0       	breq	.+12     	; 0x11e <puts+0x44>
 112:	09 95       	icall
 114:	89 2b       	or	r24, r25
 116:	79 f3       	breq	.-34     	; 0xf6 <puts+0x1c>
 118:	df ef       	ldi	r29, 0xFF	; 255
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	ec cf       	rjmp	.-40     	; 0xf6 <puts+0x1c>
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	09 95       	icall
 122:	89 2b       	or	r24, r25
 124:	19 f0       	breq	.+6      	; 0x12c <puts+0x52>
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	02 c0       	rjmp	.+4      	; 0x130 <puts+0x56>
 12c:	8d 2f       	mov	r24, r29
 12e:	9c 2f       	mov	r25, r28
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
